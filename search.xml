<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[字符串技巧、思想、知识点整理]]></title>
    <url>%2F2019%2F03%2F18%2F%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8A%80%E5%B7%A7%E3%80%81%E6%80%9D%E6%83%B3%E3%80%81%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! U2FsdGVkX1+bsGkyrSezZp1YGclNo5JEyYKXsvoPzWU=]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>知识点</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十二省特派员联盟“省选”模测（第一场）]]></title>
    <url>%2F2019%2F03%2F17%2F%E5%8D%81%E4%BA%8C%E7%9C%81%E7%89%B9%E6%B4%BE%E5%91%98%E8%81%94%E7%9B%9F%E2%80%9C%E7%9C%81%E9%80%89%E2%80%9D%E6%A8%A1%E6%B5%8B%EF%BC%88%E7%AC%AC%E4%B8%80%E5%9C%BA%EF%BC%89%2F</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[联测情况总结及考试技巧分析]]></title>
    <url>%2F2019%2F03%2F15%2F%E8%81%94%E6%B5%8B%E6%83%85%E5%86%B5%E6%80%BB%E7%BB%93%E5%8F%8A%E8%80%83%E8%AF%95%E6%8A%80%E5%B7%A7%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[请输入密码 Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lyndon word的一些性质]]></title>
    <url>%2F2019%2F03%2F15%2FLyndon%2F</url>
    <content type="text"><![CDATA[wikipedia链接：https://en.wikipedia.org/wiki/Lyndon_word 定义 如果一个串最小后缀是它本身，那么称他为 Lyndon word。（与严格最小循环移位的定义是等价的） 相关性质和算法 性质1 如果 \(s\) 是 Lyndon word，那么 \(s\) 不存在 border。 性质2 如果 \(s\) 是 Lyndon word，\(s=uv\) 且 \(u\) 和 \(v\) 非空，那么 \(u&lt;v\)。 性质3 如果 \(s,t\) 是 Lyndon word 且 \(s &lt; t\)，那么 \(st\) 也是 Lyndon word。 性质4 一个长度大于等于 \(2\) 字符串的 \(s\) 是 Lyndon word 的充要条件是，\(s\) 可以拆成两个非空串 \(u,v\)，满足 \(u &lt; v\) 且 \(u\) 和 \(v\) 都是 Lyndon word。 证明 充分性即上一条性质，只证必要性。 设 \(s\) 的长度为 \(n\)，后缀 \(s[i..n]\) 是 \(s\) 的次小后缀。 假设 \(s[1..i-1]\) 有长度为 \(k\) 的 border，即 \(s[1..k]=s[i-k..i-1]\)。 因为 \(k &lt; i-1\)，所以 \(k+1 \neq i\)。 因为 \(s\) 是 Lyndon word，\(s[i..n]\) 是 \(s\) 的次小后缀，所以 \(s[i..n]&lt;s[k+1..n]\)。又因为 \(s[i-k..i-1]=s[1..k]\)，所以 \(s[i-k..n]&lt;s[1..n]\)，这与 \(s\) 是 Lyndon word 矛盾。所以 \(s[1..i-1]\) 没有 border。 根据 Lyndon word 的定义及 \(s[1..i-1]\) 没有 border，有 \(\forall 1 &lt; j \le i-1\)，\(\exists j \le k \le i-1\)，满足 \(s[k] &gt; s[k-j+1]\)，即 \(s[j..i-1] &gt; s[1..i-1]\)。所以 \(s[1..i-1]\) 是 Lyndon word。 因为 \(s[i..n]\) 是 \(s\) 的次小后缀，显然不存在 \(j&gt;i\) 满足 \(s[j..n]&lt;s[i..n]\)，所以 \(s[i..n]\) 是 Lyndon word。 所以 \(u=s[1..i-1],v=s[i..n]\) 是一组合法的拆分，必要性得证。 性质5 任意一个字符串 \(s\) 都可以唯一地拆成若干个字典序不增的 Lyndon Word。 我抽代太菜了...其他的性质以后再补吧。]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[LOJ129] Lyndon 分解]]></title>
    <url>%2F2019%2F03%2F13%2F%5BLOJ129%5D-Lyndon%E5%88%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[解法 关于 Lyndon word 的一些结论可以看这个。 代码 12345678910111213141516171819202122232425262728293031323334#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;using namespace std;const int maxn = (1&lt;&lt;20)+10;int n;char str[maxn];int main() &#123; scanf("%s", str+1); n = int(strlen(str+1)); int s = 1, l = 0, p = 0; while (s &lt; n) &#123; l = 1; p = s+1; for (p = s+1; ; ++p) &#123; if (str[p] &lt; str[p-l]) &#123; while (s+l-1 &lt; p) &#123; printf("%d ", s+l-1); s += l; &#125; break; &#125; else if (str[p] &gt; str[p-l]) &#123; l = p-s+1; &#125; &#125; &#125; if (s &lt;= n) printf("%d ", n); printf("\n"); return 0;&#125;]]></content>
      <tags>
        <tag>字符串</tag>
        <tag>LOJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Codeforces1120D] Power Tree]]></title>
    <url>%2F2019%2F03%2F11%2F%5BCodeforces1120D%5D-%2F</url>
    <content type="text"><![CDATA[题目链接： https://codeforces.com/contest/1120/problem/D 题目大意 给定一棵 \(n\) 个点，以 \(1\) 为根的树，第 \(i\) 个点有一个价格 \(c_i\)。 你要选一些点，然后另一个人会给每个叶节点设置一个数字。你只能对已经选择的点做子树加任意数字的操作。 你要通过若干次操作把所有叶子节点上的数变为 \(0\)。 问：要确保另一个人无论怎么操作你都能把叶子上的数变成 \(0\)，你选择的点价格总和最小是什么？有哪些点被至少一种最小价格的方案包含？ \(n \le 200000\)，\(0\le c_i \le 10^9\)。 解法 这个问题可以看成，你要选一些点作为未知数，每个叶子的限制构成了一个方程，你要让这个线性方程组满足，无论常数项取值是什么，这个线性方程组都有解。 因为价格是非负整数，如果系数矩阵的列向量组线性相关，必可以删除某一列，即可以少选一个点，这样一定不会变的更差，所以系数矩阵的列向量组线性无关。因为无论常数项的取值是什么，方程组都要有解，所以行数等于列数。 结论 设叶节点个数为 \(x\)，一个包含恰好 \(x\) 个点的选取方案能保证可以将所有叶子上的数字变成 \(0\) 的充要条件是，任意两个叶子到根的路径上，存在被选取的点，且深度最大的被选取点不同。 证明 必要性显然。 充分性：把方程组的未知数按任意一种 \(dfs\) 序排列，系数矩阵中，每一行的第一个非 \(0\) 元素所在的列都不同，所以系数矩阵的列向量组线性无关，又因为行数等于列数，所以无论常数项取值是什么，方程组都有解。 状态 \(dp[i][j][k]\) ： \(i\) 表示只考虑以 \(i\) 为根的子树。 \(j\) 表示 \(i\) 是否被选择。 \(k\) 表示是否存在一个叶子，他到 \(i\) 的路径中没有点被选择。 \(dp\) 数组中存的是，满足任意两个叶子到 \(i\) 的路径上深度最大的祖先不同（如果不存在则看作 \(0\)）的最小价格和。 \(dp\) 一下，然后记录哪些转移可以取到最优值，最后从根开始 \(dfs\) 一遍求方案即可。 代码 （巨丑） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include &lt;iostream&gt;#include &lt;cstring&gt;#include &lt;cstdio&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;typedef long long ll;const int maxn = 200010;const ll inf = 1e18;int c[maxn], vis[4*maxn], n;ll dp[maxn][2][2];vector&lt;int&gt; tree[maxn], tran[maxn*4];void dfs1(int u, int f) &#123; dp[u][0][0] = dp[u][0][1] = dp[u][1][0] = dp[u][1][1] = inf; for (int i = 0; i &lt; tree[u].size(); i++) &#123; int v = tree[u][i]; if (v != f) &#123; dfs1(v, u); &#125; &#125; if (u == 1 || tree[u].size() &gt; 1) &#123; ll s = 0, mn = inf, cm = inf; for (int i = 0; i &lt; tree[u].size(); i++) &#123; int v = tree[u][i]; if (v != f) &#123; s += min(dp[v][0][0], dp[v][1][0]); ll t = dp[v][0][1] - min(dp[v][0][0], dp[v][1][0]); if (t &lt;= mn) &#123; cm = mn; mn = t; &#125; else if (t &lt; cm) cm = t; &#125; &#125; dp[u][0][0] = s; dp[u][0][1] = s+mn; dp[u][1][0] = min(s+c[u]+mn, s+c[u]); for (int i = 0; i &lt; tree[u].size(); i++) &#123; int v = tree[u][i]; if (v != f) &#123; if (dp[v][0][0] &lt; dp[v][1][0]) &#123; tran[u*4+2*0+0].push_back(v*4+2*0+0); if (mn &gt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); &#125; else if (dp[v][0][0] &gt; dp[v][1][0]) &#123; tran[u*4+2*0+0].push_back(v*4+2*1+0); if (mn &gt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; else &#123; tran[u*4+2*0+0].push_back(v*4+2*0+0); tran[u*4+2*0+0].push_back(v*4+2*1+0); if (mn &gt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); if (mn &gt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; ll t = dp[v][0][1] - min(dp[v][0][0], dp[v][1][0]); if (t == mn) &#123; if (mn == cm) &#123; if (dp[v][0][0] &lt; dp[v][1][0]) &#123; tran[u*4+2*0+1].push_back(v*4+2*0+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); &#125; else if (dp[v][0][0] &gt; dp[v][1][0]) &#123; tran[u*4+2*0+1].push_back(v*4+2*1+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; else &#123; tran[u*4+2*0+1].push_back(v*4+2*0+0); tran[u*4+2*0+1].push_back(v*4+2*1+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; &#125; tran[u*4+2*0+1].push_back(v*4+2*0+1); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+1); &#125; else &#123; if (dp[v][0][0] &lt; dp[v][1][0]) &#123; tran[u*4+2*0+1].push_back(v*4+2*0+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); &#125; else if (dp[v][0][0] &gt; dp[v][1][0]) &#123; tran[u*4+2*0+1].push_back(v*4+2*1+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; else &#123; tran[u*4+2*0+1].push_back(v*4+2*0+0); tran[u*4+2*0+1].push_back(v*4+2*1+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*0+0); if (mn &lt;= 0) tran[u*4+2*1+0].push_back(v*4+2*1+0); &#125; &#125; &#125; &#125; &#125; else &#123; dp[u][1][0] = c[u]; dp[u][0][1] = 0; &#125;&#125;void dfs2(int u) &#123; vis[u] = 1; for (int i = 0; i &lt; tran[u].size(); i++) &#123; int v = tran[u][i]; if (!vis[v]) dfs2(v); &#125;&#125;int main() &#123; scanf("%d", &amp;n); for (int i = 1; i &lt;= n; i++) scanf("%d", &amp;c[i]); for (int i = 1; i &lt; n; i++) &#123; int u, v; scanf("%d%d", &amp;u, &amp;v); tree[u].push_back(v); tree[v].push_back(u); &#125; dfs1(1, 0); int cnt = 0; ll ans = min(dp[1][0][0], dp[1][1][0]); printf("%lld ", ans); if (dp[1][0][0] == ans) dfs2(4*1+2*0+0); if (dp[1][1][0] == ans) dfs2(4*1+2*1+0); for (int i = 1; i &lt;= n; i++) &#123; if (vis[4*i+2*1+0] || vis[4*i+2*1+1]) &#123; cnt ++; &#125; &#125; printf("%d\n", cnt); for (int i = 1; i &lt;= n; i++) &#123; if (vis[4*i+2*1+0] || vis[4*i+2*1+1]) &#123; printf("%d ", i); &#125; &#125; printf("\n"); return 0;&#125;]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[Codeforces1120C] Compress String]]></title>
    <url>%2F2019%2F03%2F11%2F-%2F</url>
    <content type="text"><![CDATA[题目链接： https://codeforces.com/contest/1120/problem/C 题目大意 你有一个长度为 \(n\) 个字符串 \(s\)。 请你把 \(s\) 拆成若干个字符串 \(s=t_1t_2\cdots t_k\)。 对于第 \(i\) 个串，若 \(t_i\) 是 \(t_1t_2\cdots t_{i-1}\) 的字符串，你需要付出 \(b\) 的代价，否则 \(t_i\) 长度必须为 \(1\)，你需要付出 \(a\) 的代价。求最小代价。 \(n \le 5000\)，字符集大小 \(26\)。 解法 设 \(dp_i\) 表示前 \(i\) 个字符的最小划分，在求出 \(dp_i\) 后用 \(kmp\) 找最长在前面出现过的从 \(i+1\) 开始的串，更新所有 \(dp_j\)。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;using namespace std;const int maxn = 5010;const int inf = 0x3f3f3f3f;int n, a, b, fail[maxn], dp[maxn];char s[maxn];int main() &#123; scanf("%d%d%d", &amp;n, &amp;a, &amp;b); scanf("%s", s+1); fail[0] = -1; for (int i = 1; i &lt;= n; i++) &#123; int cur = fail[i-1]; while (cur != -1) &#123; if (s[cur+1] == s[i]) &#123; fail[i] = cur+1; break; &#125; cur = fail[cur]; &#125; &#125; for (int i = 1; i &lt;= n; i++) dp[i] = inf; for (int i = 0; i &lt;= n; i++) &#123; fail[0] = -1; for (int j = 1; i+j &lt;= n; j++) &#123; int cur = fail[j-1]; fail[j] = 0; while (cur != -1) &#123; if (s[i+cur+1] == s[i+j]) &#123; fail[j] = cur+1; break; &#125; cur = fail[cur]; &#125; &#125; int p = 0, mx = 0; for (int j = 1; j &lt;= i; j++) &#123; while (p != -1) &#123; if (s[i+p+1] == s[j]) &#123; ++ p; break; &#125; if (p) p = fail[p]; else break; &#125; if (p &gt; mx) mx = p; &#125; for (int j = 1; j &lt;= mx; j++) &#123; dp[i+j] = min(dp[i+j], dp[i]+b); &#125; dp[i+1] = min(dp[i+1], dp[i]+a); &#125; printf("%d\n", dp[n]); return 0;&#125;]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博弈整理（一）]]></title>
    <url>%2F2019%2F03%2F08%2F%E5%8D%9A%E5%BC%88%E8%AE%BA%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Impartial game wikipedia链接：https://en.wikipedia.org/wiki/Impartial_game impartial game 是指满足如下条件的游戏： - 两个玩家轮流操作，直到达到不能操作的状态（terminal position）。 - 当一个玩家不能操作时，winner 就被确定了。 - 每个状态的操作数和状态总数是有限的。 - 所有的操作必须同时能被两个玩家进行。 - 所有操作的结果都是确定性的。 Normal play convention wikipedia链接：https://en.wikipedia.org/wiki/Normal_play_convention Impartial game 的 Normal play convention ：最后一个可以操作的玩家获胜。 Nim游戏 wikipedia链接：https://en.wikipedia.org/wiki/Nim 有若干堆石子，两个人轮流取石子。每次轮到的人可以选择从某一堆中拿走若干颗石子（不能不拿），不能按规则操作的人输。 Nim 游戏属于 Impartial game。 Nim游戏的胜利条件 定理：当且仅当每堆石子的个数异或和不为 \(0\) 时，先手必胜。 证明： 对于 terminal position，即没有石的情况，异或和为 \(0\)，轮到这个状态的人输。定理对 terminal position 成立。 引理1 若一个状态，每堆石子个数异或和不为 \(0\)，则它必定可以转移到一个石子个数为 \(0\) 的状态。 证明： 设每堆石子个数的异或和为 \(s\)。 设 \(s\) 最高的二进制位是第 \(k\) 位（从低到高，最低位为第 \(0\) 位）。 一定存在一堆石子个数为 \(x\)，二进制下 \(x\) 的第 \(k\) 位为 \(1\)。 除了这堆石子外，其他堆石子个数的异或和为 \(s\oplus x\)。 \(s\oplus x\) 和 \(x\) 在所有比第 \(k\) 位高的二进制位上相等，\(s\oplus x\) 的第 \(k\) 位为 \(0\)，\(x\) 的第 \(k\) 位为 \(1\)，所以 \(s \oplus x &lt; x\)。 可以从这堆石子中取走 \(x-s\oplus x\) 个石子，使异或和变为 \(0\)。 引理2 若一个状态，每堆石子个数异或和为 \(0\)，无论怎么操作都会转移到一个每堆石子个数异或和不为 \(0\) 的状态。 证明： 设操作的堆在操作前有 \(x\) 颗石子。 那么除了这堆以外的其他堆石子数异或和也为 \(x\)。 在取石子后，这堆石子的个数一定不为 \(x\)。 只有这堆石子的个数为 \(x\) 时，与其他堆石子个数的异或和才会为 \(0\)。 所以操作后，每堆石子个数的异或和一定非 \(0\)。 根据结构归纳法可知定理成立。 Sprague–Grundy 定理 wikipedia链接：https://en.wikipedia.org/wiki/Sprague–Grundy_theorem 定义 \(mex\) 运算，一个集合的 \(mex\) 值是最小的没有出现在这个集合中的自然数。 定义 Sprague-Grundy 函数：对于一个状态 \(x\)，当 \(x\) 是 terminal position 时，\(SG(x)=mex\{SG(y)|x\) 可以转移到 \(y\}\)。 可以用 Sprague-Grundy 函数判断一个状态是必胜状态还是必败状态，因为必胜状态函数值必不为 \(0\)，必败状态函数值必为 \(0\)。 定义两个游戏的 disjunctive sum 为一个游戏：轮到每个玩家的时候，他可以选择两个游戏中的一个游戏，然后在这个游戏上操作一步，无法操作的人输。 显然 disjunctive sum 满足交换律和结合律。 定理 有 \(n\) 个游戏 \(G_1,G_2,\cdots,G_n\)，设他们的 disjunctive sum 为 \(G\)。那么 \(SG(G)=SG(G_1)\oplus SG(G_2)\cdots \oplus SG(G_n)\)。 证明可以看这个。 这也说明了每一个 normal play convention 下的 impartial game 都等价于一个Nim游戏。]]></content>
      <tags>
        <tag>博弈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World!]]></title>
    <url>%2F2019%2F03%2F08%2FHello-World%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
</search>
